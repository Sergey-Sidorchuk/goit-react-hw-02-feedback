{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","type","className","styles","onClick","Section","title","children","defaultProps","Statistics","good","bad","neutral","total","positivePercentage","App","state","setState","prevState","this","toFixed","totalFeedbacks","countTotalFeedback","countPositiveFeedbackPercentage","message","Component","percentageOfGoodFeedback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,QAAU,4BAA4B,IAAM,0B,qBCA9FD,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,4DAA4D,QAAU,+DAA+D,IAAM,6D,+MCc9LC,EATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAAmC,qCACtDD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBAAQC,KAAK,SAAsBC,UAAWC,IAAQH,GAASI,QAAS,kBAAIN,EAAgBE,IAA5F,SAAsGA,GAA3EA,MAFwB,QCFrDK,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,gCACKD,GAAS,6BAAKA,IACdC,MAKTF,EAAQG,aAAe,CACnBF,MAAO,IAQID,Q,gBCjBTI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,oBAAGZ,UAAWC,IAAOO,KAArB,mBAAkCA,KAClC,oBAAGR,UAAWC,IAAOS,QAArB,sBAAwCA,KACxC,oBAAGV,UAAWC,IAAOQ,IAArB,kBAAgCA,KAEpB,IAAVE,EACF,qCACI,iDAAoBA,KACpB,oBAAGX,UAAWC,IAAOO,KAArB,iCAAgDI,EAAhD,OACA,8CACE,wBAKlBL,EAAWD,aAAe,CACtBK,MAAO,KACPC,mBAAoB,MAWTL,Q,gBCrBTM,E,4MAaFC,MAAQ,CACJN,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAGTb,gBAAkB,SAACE,GACf,EAAKiB,UAAS,SAAAC,GACV,OAAO,eACFlB,EAASkB,EAAUlB,GAAS,O,wDAKzC,WACI,MAA+BmB,KAAKH,MAEpC,OAFA,EAAQN,KAAR,EAAcE,QAAd,EAAuBD,M,6CAI3B,WACI,MAA+BQ,KAAKH,MAA5BN,EAAR,EAAQA,KAER,OADmCA,GAAQA,EAD3C,EAAcE,QAAd,EAAuBD,KAC6C,KAAKS,QAAQ,K,oBAIrF,SAAOC,GACP,MAA+BF,KAAKH,MAA5BN,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,IACvB,OACE,sBAAKT,UAAU,MAAf,UACI,uDAEF,cAAC,EAAD,CAASI,MAAM,GAAf,SACE,cAAC,EAAD,CAAiBT,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBAAiBqB,KAAKrB,oBAErD,IAAnBuB,EACI,cAAC,EAAD,CAASf,MAAM,aAAf,SACE,cAAC,EAAD,CAAaI,KAAMA,EAAME,QAASA,EAASD,IAAKA,EAAKE,MAAOM,KAAKG,qBAAsBR,mBAAoBK,KAAKI,sCAElH,cAAE,IAAF,CAAeC,QAAQ,6B,GAnDvBC,aAAZV,EACKP,aAAe,CAClBa,eAAgB,EAChBK,yBAAyB,GAwDlBX,QCjEfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ac840438.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"Statistics_good__1Lty4\",\"neutral\":\"Statistics_neutral__1-ArG\",\"bad\":\"Statistics_bad__3eVfM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__32oTU\",\"good\":\"FeedbackOptions_good__jDyxa FeedbackOptions_button__32oTU\",\"neutral\":\"FeedbackOptions_neutral__159cz FeedbackOptions_button__32oTU\",\"bad\":\"FeedbackOptions_bad__cznj_ FeedbackOptions_button__32oTU\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\n\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (<>\r\n    {options.map(option => \r\n        <button type='button' key={option} className={styles.[option]} onClick={()=>onLeaveFeedback(option)}>{option}</button>\r\n    )} </>   \r\n);\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n}\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n\r\n    </div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: ''\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p className={styles.good}>Good: {good}</p>\r\n            <p className={styles.neutral}>Neutral: {neutral}</p>\r\n            <p className={styles.bad}>Bad: {bad}</p>\r\n            \r\n            {(total !== 0) ?\r\n            <>\r\n                <p>Total feedback: {total}</p>\r\n                <p className={styles.good}>Positive feedbacks: {positivePercentage}%</p>\r\n                <h3>Thank you</h3>\r\n            </> : \"No feedback given\"}\r\n        </>\r\n    )\r\n};\r\n\r\nStatistics.defaultProps = {\r\n    total: null,\r\n    positivePercentage: null,\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n  \r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport './App.css';\n\n\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from './components/Section/Section';\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from './components/Notification/Notification';\n\n\n\n\nclass App extends Component {\n    static defaultProps = {\n        totalFeedbacks: 0,\n        percentageOfGoodFeedback:0,\n    }\n    static propTypes = {\n        totalFeedbacks: PropTypes.number,\n        percentageOfGoodFeedback: PropTypes.number,\n        good: PropTypes.number,\n        bad: PropTypes.number,\n        neutral: PropTypes.number,\n        options: PropTypes.arrayOf(PropTypes.number),\n    };\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    onLeaveFeedback = (option) => {\n        this.setState(prevState => {\n            return ({\n                [option]: prevState[option] +1\n            })\n        })       \n    }\n\n    countTotalFeedback() {\n        const { good, neutral, bad } = this.state;\n        const totalFeedbacks = good + neutral + bad;\n        return totalFeedbacks;\n    }\n    countPositiveFeedbackPercentage() {\n        const { good, neutral, bad } = this.state;\n        const percentageOfGoodFeedback = ((good / (good + neutral + bad)) * 100).toFixed(2);\n        return percentageOfGoodFeedback;\n    }\n\n    render(totalFeedbacks) {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"App\">\n          <h1>Please leave feedback</h1>  \n\n        <Section title=\"\">\n          <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={this.onLeaveFeedback}></FeedbackOptions>\n        </Section>\n            {(totalFeedbacks !== 0)\n                ? <Section title=\"Statistics\">\n                    <Statistics  good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} />\n                </Section>\n                : < Notification message=\"No feedback given\" />\n            }\n      </div>\n    );\n  }  \n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}